# Generated by Django 4.2.7 on 2023-11-11 16:17

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.service


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ResumeUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('password', models.CharField(help_text='Пароль необходим!', max_length=150, verbose_name='Пароль')),
                ('first_name', models.CharField(blank=True, help_text='Имя пользователя', max_length=150, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, help_text='Фамилия пользователя', max_length=150, null=True, verbose_name='Фамилия')),
                ('phone', models.CharField(blank=True, help_text='Номер телефона', max_length=150, null=True, verbose_name='Номер телефона')),
                ('telegram', models.CharField(blank=True, help_text='Аккаунт в Telegram. Начинается с @', max_length=33, null=True, validators=[django.core.validators.MinLengthValidator(6, message='Длинна аккаунта в Tg минимум 5 символов.'), user.service.validate_starts_with], verbose_name='Telegram')),
                ('city', models.CharField(blank=True, help_text='Ваш город', max_length=150, null=True, verbose_name='Город')),
                ('birth_date', models.DateField(blank=True, help_text='Ваша дата рождения', null=True, verbose_name='Дата рождения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Название проекта', max_length=150, null=True, verbose_name='Название проекта')),
                ('info', models.TextField(blank=True, help_text='Краткое описание проекта', null=True, verbose_name='Описание проекта')),
                ('web_page', models.CharField(help_text='Ссылка на проект', verbose_name='Ссылка на проект')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор проекта')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
                'ordering': ('web_page',),
                'default_related_name': 'projects',
            },
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about', models.TextField(help_text='Информация о себе, своих хобби и достижениях', verbose_name='О себе')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'О себе',
                'verbose_name_plural': 'О себе',
                'ordering': ('about',),
                'default_related_name': 'about',
            },
        ),
        migrations.CreateModel(
            name='EmploymentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(help_text='Название организации', max_length=150, verbose_name='Организация')),
                ('web_page', models.CharField(blank=True, help_text='Сайт организации', null=True, verbose_name='Сайт')),
                ('position', models.CharField(help_text='Ваша должность в компании', max_length=150, verbose_name='Должность')),
                ('start_date', models.DateField(help_text='Дата начала работы', verbose_name='Дата начала работы')),
                ('end_date', models.DateField(default=datetime.datetime(2023, 11, 11, 16, 17, 8, 427451, tzinfo=datetime.timezone.utc), help_text='Дата окончания работы', verbose_name='Дата окончания работы')),
                ('responsibilities', models.TextField(help_text='Перечислите ваши обязанности и достижения', verbose_name='Ваши обязанности и достижения')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Работник')),
            ],
            options={
                'verbose_name': 'Опыт работы',
                'verbose_name_plural': 'Опыт работы',
                'ordering': ('company',),
                'default_related_name': 'works',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('univercity', models.CharField(help_text='Название учебного заведения', max_length=150, verbose_name='ВУЗ')),
                ('start_date', models.DateField(help_text='Дата поступления', verbose_name='Дата поступления')),
                ('end_date', models.DateField(default=datetime.datetime(2023, 11, 11, 16, 17, 8, 428472, tzinfo=datetime.timezone.utc), help_text='Дата окончания', verbose_name='Дата окончания')),
                ('faculty', models.CharField(blank=True, help_text='Ваша факультет', max_length=150, null=True, verbose_name='Факультет')),
                ('speciality', models.CharField(help_text='Ваша специальность', max_length=150, verbose_name='Специальность')),
                ('grade', models.CharField(blank=True, choices=[('Бакалавр', 'Бакалавр'), ('Магистр', 'Магистр'), ('Специалист', 'Специалист'), ('Кандидат наук', 'Кандидат наук'), ('Доктор наук', 'Доктор наук')], help_text='Ваша степень', max_length=150, null=True, verbose_name='Степень')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Образование',
                'verbose_name_plural': 'Образование',
                'ordering': ('univercity',),
                'default_related_name': 'educations',
            },
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(help_text='Название организации проводившей обучение', max_length=150, verbose_name='Организация')),
                ('name', models.TextField(help_text='Название курса', max_length=150, verbose_name='Название курса')),
                ('date', models.DateField(help_text='Дата окончания курсов', verbose_name='Дата окончания курсов')),
                ('speciality', models.CharField(help_text='Ваша специальность', max_length=150, verbose_name='Специальность')),
                ('experience', models.TextField(help_text='Полученный вами опыт', verbose_name='Опыт')),
                ('skills', models.TextField(help_text='Полученные вами навыки', verbose_name='Навыки')),
                ('diplom_link', models.CharField(blank=True, help_text='Ссылка на ваш диплом', null=True, verbose_name='Ссылка на диплом')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Студент курсов')),
            ],
            options={
                'verbose_name': 'Повышение квалификации',
                'verbose_name_plural': 'Повышение квалификации',
                'ordering': ('company',),
                'default_related_name': 'courses',
            },
        ),
        migrations.AddConstraint(
            model_name='projects',
            constraint=models.UniqueConstraint(fields=('author', 'web_page'), name='unique_project'),
        ),
        migrations.AddConstraint(
            model_name='information',
            constraint=models.UniqueConstraint(fields=('user', 'about'), name='unique_about'),
        ),
        migrations.AddConstraint(
            model_name='employmenthistory',
            constraint=models.UniqueConstraint(fields=('employee', 'company', 'position'), name='unique_work_in_one_company'),
        ),
        migrations.AddConstraint(
            model_name='education',
            constraint=models.UniqueConstraint(fields=('student', 'univercity', 'start_date', 'end_date'), name='unique_univercity_in_one_time'),
        ),
        migrations.AddConstraint(
            model_name='courses',
            constraint=models.UniqueConstraint(fields=('student', 'company', 'name', 'date'), name='unique_course_in_one_time'),
        ),
    ]
